# configuration for oris gateway: connections, targets and requests
# vim: set filetype=conf shiftwidth=4 tabexpand
#
#connections:
#    datafeed: "data://ovr.example.com:3000"
#    control: "ctrl://*:4422"
#	;
#
#targets:
#    testing: "http://live.example.com:4616"
#	;

on connection established:
	request current_event;

on table cmd:
	request bypass;

on table ver:
	http put ("/event/" + {VER.1}) using event;
	http put "/currentevent" with value {VER.1};

on table tod:
	http put "/time" with value {TOD.1};

on table vrd:
	iterate vrd:
		http put ("/event/" + {VER.1} + "/comp/" + {VRD.1}) using competition;
		request splits;
		request startlist;
	end;

on table sta:
	copy table "STA" to ("STA_" + {VER.1} + "_" + {STA!.1});
	http put ("/event/" + {VER.1} + "/comp/" + {STA!.1} + "/splits") using splits for table STA;
	if (LOOKUP({STA!.1}, "VRD", 1, 10) == 3) iterate sta:
		if ({STA.1} != 'S') request splits_from_sta;
	end;

on table stl:
	http put ("/event/" + {VER.1} + "/comp/" + {STL!.1} + "/startlist") using startlist for table STL;

on table rnr:
	http put ("/event/" + {VER.1} + "/comp/" + {RNR!.1} + "/results") using split_result for table RNR;

on table log:
	http put ("/event/" + {VER.1} + "/comp/" + {LOG.1} + "/boat/" + {LOG.3} + "/split/" + {LOG.5}) using logentry;

on table stt:
	if ({STT.3} == 6) http delete ("/event/" + {VER.1} + "/comp/" + {STT.1} + "/startlist");
	if ({STT.3} == 0) http delete ("/event/" + {VER.1} + "/comp/" + {STT.1} + "/results");
	http put ("/event/" + {VER.1} + "/comp/" + {STT.1} + "/state") with value {STT.3};
	iterate vrd:
		if ({VRD.1} == {STT.1}) update vrd set field (10) = {STT.3};
	end;
	# create final result items
	if ({STT.3} == 3) copy table "STA_" + {VER.1} + "_" + {STT.1} to "STA_R";
	if ({STT.3} == 3) iterate STA_R:
		if {STA_R.1} >= 1 request final_split_result;
	end;

on command "cc":
	http delete ("/event/" + {VER.1} + "/cache");

on command "setslug":
	http put ("/event/" + {VER.1} + "/slug") with value LOOKUP({VER.1}, "SLUG", 1, 2);

template event:
	title: {VER.2}
	venue: {VER.3}
	location: {VER.4}
	dateFrom: TOKEN({VER.5}, 3, '.') + '-' + LPAD(TOKEN({VER.5}, 2, '.'), 2, '0') + "-" + LPAD(TOKEN({VER.5}, 1, '.'), 2, '0')
	dateTo: TOKEN({VER.6}, 3, '.') + '-' + LPAD(TOKEN({VER.6}, 2, '.'), 2, '0') + "-" + LPAD(TOKEN({VER.6}, 1, '.'), 2, '0')
	sport: {VER.7}

template competition:
	id: {VRD.1}
	raceClass: {VRD.3}
	label: {VRD.4}
#	label: LOOKUP({VRD.11}, 'HEATDEF', 1, 3) + ' ' + {VRD.12}
	dateTime: TOKEN({VRD.6}, 3, '.') + '-' + LPAD(TOKEN({VRD.6}, 2, '.'), 2, '0') + "-" + LPAD(TOKEN({VRD.6}, 1, '.'), 2, '0') + 'T' + {VRD.7} + ":00"
	gender: {VRD.8}
	qrule: {VRD.9}
	state: {VRD.10}
	round: {VRD.11}
	heat: {VRD.12}
	distance: {VRD.13}
	raceNr: {VRD.14}
	numAthletes: {VRD.15}

template splits:
	offset: {STA.1}
	distance: {STA.4}

template startlist:
	bid: {STL.1}
	bib: {STL.2}
	lane: {STL.3}
	label: {STL.5}
	crew: {STL.6}
	nation: {STL.7}

template logentry:
	rank: {LOG.7}
	result: {LOG.6}
	delta: {LOG.8}

template fullresult:
	bib: { RES.2 }
	qualified: { RES.13 }

template split_result:
	bid: {RNR.2}
	split: {RNR!.4}
	rank: {RNR.1}
	result: {RNR.5}
	delta: {RNR.6}

requests:
	bypass: "?" + {CMD.1} + "|" + {CMD.2} + "|" + {CMD.3}
	current_event: "?VER"
	final_split_result_1: "?RNR|" + {STT.1} + "|" + {STT.1} + "|" + {STA_R.1}
	splits: "?STA|" + {VRD.1} + "|" + {VRD.1}
	splits_from_sta: "?RNR|" + {STA!.1} + "|" + {STA!.1} + "|" + {STA.1}
	startlist: "?STL|" + {VRD.1} + "|" + {VRD.1}
