/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : oris_automation.g
 *     -                            On : 2012-11-26 21:12:28
 *     -                 for the lexer : oris_automationLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
oris_automationLexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef poris_automationLexer, which is returned from a call to oris_automationLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in poris_automationLexer are  as follows:
 *
 *  - 
 void
      poris_automationLexer->AND(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->BRACKET_LEFT(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->BRACKET_RIGHT(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->CLOSED(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->COLON(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->COMMA(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->COMMAND(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->CONNECTION(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->CURLY_LEFT(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->CURLY_RIGHT(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->DOT(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->ESTABLISHED(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->HTTP(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->ON(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->OR(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->REQUEST(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->SEMICOLON(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->TABLE(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->TEMPLATE(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->T__47(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->T__48(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->T__49(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->T__50(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->T__51(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->T__52(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->T__53(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->T__54(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->T__55(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->ML_COMMENT(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->SL_COMMENT(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->INTEGER(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->IDENTIFIER(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->STRING(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->DIGIT(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->LETTER(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->UNDERSCORE(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->PLUS(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->MINUS(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->MUL(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->MOD(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->DIV(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->EQUAL(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->NOT_EQUAL(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->LTH(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->LE(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->GE(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->GT(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->NEWLINE(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->WS(poris_automationLexer)
 *  - 
 void
      poris_automationLexer->Tokens(poris_automationLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_oris_automationLexer_H
#define _oris_automationLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct oris_automationLexer_Ctx_struct oris_automationLexer, * poris_automationLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
oris_automationLexer

 */
struct oris_automationLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mAND)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mBRACKET_LEFT)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mBRACKET_RIGHT)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mCLOSED)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mCOLON)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mCOMMA)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mCOMMAND)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mCONNECTION)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mCURLY_LEFT)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mCURLY_RIGHT)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mDOT)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mESTABLISHED)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mHTTP)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mON)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mOR)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mREQUEST)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mSEMICOLON)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mTABLE)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mTEMPLATE)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mT__47)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mT__48)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mT__49)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mT__50)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mT__51)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mT__52)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mT__53)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mT__54)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mT__55)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mML_COMMENT)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mSL_COMMENT)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mINTEGER)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mIDENTIFIER)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mSTRING)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mDIGIT)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mLETTER)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mUNDERSCORE)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mPLUS)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mMINUS)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mMUL)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mMOD)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mDIV)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mEQUAL)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mNOT_EQUAL)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mLTH)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mLE)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mGE)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mGT)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mNEWLINE)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mWS)	(struct oris_automationLexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct oris_automationLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct oris_automationLexer_Ctx_struct * ctx);
    void	    (*free)   (struct oris_automationLexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API poris_automationLexer oris_automationLexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API poris_automationLexer oris_automationLexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__47      47
#define T__48      48
#define T__49      49
#define T__50      50
#define T__51      51
#define T__52      52
#define T__53      53
#define T__54      54
#define T__55      55
#define AND      4
#define BRACKET_LEFT      5
#define BRACKET_RIGHT      6
#define CLOSED      7
#define COLON      8
#define COMMA      9
#define COMMAND      10
#define CONNECTION      11
#define CURLY_LEFT      12
#define CURLY_RIGHT      13
#define DIGIT      14
#define DIV      15
#define DOT      16
#define EQUAL      17
#define ESTABLISHED      18
#define FUNCTION      19
#define GE      20
#define GT      21
#define HTTP      22
#define IDENTIFIER      23
#define INTEGER      24
#define LE      25
#define LETTER      26
#define LTH      27
#define MINUS      28
#define ML_COMMENT      29
#define MOD      30
#define MUL      31
#define NEWLINE      32
#define NOT_EQUAL      33
#define ON      34
#define OR      35
#define PARAMS      36
#define PLUS      37
#define RECORD      38
#define REQUEST      39
#define SEMICOLON      40
#define SL_COMMENT      41
#define STRING      42
#define TABLE      43
#define TEMPLATE      44
#define UNDERSCORE      45
#define WS      46
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for oris_automationLexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
